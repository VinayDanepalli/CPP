9, 12, 18, 
int, long, long long, float, double
string and getline
char

char                 1 byte                 127 to 127 or 0 to 255                           3
unsigned char        1 byte                  0 to 255                                        3
signed char          1 byte                 -127 to 127                                      3

int                  4 bytes                2147483648 to 2147483647                         10-1
unsigned int         4 bytes                0 to 4294967296                                  10-1
signed int           4 bytes                2147483648 to 2147483647
    
short int            2 bytes                -32768 to 32767                                  5-1
unsigned short int   2 bytes                0 to 65535                                       5-1
signed short int     2 bytes                -32768 to 32767                                  5-1

long int             8 bytes                9223372036854775808 to 9223372036854775807       19-1
signed long int      8 bytes                9223372036854775808 to 9223372036854775807       19-1
unsigned long int    8 bytes                0 to 18446744073709551615                        20-1

long long int        8 bytes
unsigned ll int      8 bytes
signed ll int        8 bytes

float                4 bytes
double               8 bytes
long double          12 bytes
wchar_t              2 or 4 bytes           1 wide character



#include<iostream>
#include<utility> # pair, 
#include<bits/stdc++.h>

using namespace std;

std::cin >>
std::cout <<
std::endl

getline(cin, string_var) # reads entire line
cin >> string_var # reads just the next word

if ... else if ... else
switch(expr){ case: ... break;   case : ... break; default: ....}
array elements are stored consequently, and arrays are homogenous data types
strings are made up of characters, so when assigning to a particular index of string, use single quotes

functions 
void, return, parameterised, non parameterised
always return something for non void functions

pass by value, 
pass by reference (& while receiving) except arrays
arrays are by default pass by reference


int arr[5];

string_var.size() # length of string 
string_var[1] = "a"; # wrong, cause string is made up of characters
string_var[1] = 'a';

for(int i = 1; i<=n; i++)

while(i<=n){... i++}

do{...} while(i<=n);


char ch = 'A'; 
char next_ch = (char) (ch + 1);  # stores B


pair is contained in utility
pair<int, int> p = {1, 2};
p.first;
p.second;
pair<int, pair<int, int>> p1 = {1, {4, 3}};



vector<pair<int, int>> v;
v.push_back({3,9}); # explicitly push a pair
v.emplace_back(1,2); # assumes it is a pair; usually faster

vector<int> v(5); # initialize with 0
vector<int> v(5, 10); #initialize with 10
vector<int> v(v1); # copy v1 into v


vector<int>::iterator v_it = v.begin()  # array first element address
v_it++; # array second element address
*(v_it); # array second element value

v.end() # pointer to memory location after the last element in vector
v.rend() # pointer to memory location before the first element in vector
vector<int>::iterator v_rb = v.rbegin() # pointer to last element in vector
v_rb++; points to second last element in vector
v.back() # last element in the vector

v[0] --- first element
v.at(0) --- element at index 0

for(vector<int>::iterator it = v.begin(); it!= v.end(); it++) -- it is pointer

for(auto it = v.begin(); it!= v.end(); it++) -- it is pointer

for(auto it : v)  -- it is value

v.erase(v.begin()) # delete first element
v.erase(v.begin(), v.begin() + 4) # delete first four elements, [start, end)

vector<int> v(2, 100); # 100, 100
v.insert(v.begin(), 300); # 300, 100, 100
v.insert(v.begin()+1, 2, 10); # 300, 10, 10, 100, 100

vector<int> v2(2, 50); # 50, 50
v.insert(v.begin(), v2.begin(), v2.end()); # 50 50 300 10 10 100 100

v.size(); # 7

v.insert(loc, value) # insert value before this location

v.pop_back() # delete last element; is a void function.

v.clear() # clears vector elements

v.empty() # returns 1 if vector is empty otherwise 0


list<int> ls;
ls.push_front()
ls.push_back()
ls.emplace_back()
ls.emplace_front()
begin, end, rbegin, rend, clear, insert, size, swap


deque<int> dq;
dq.push_back(4);
dq.emplace_back(5);
dq.push_front(3);
dq.emplace_front(2);

dq.back();
dq.front();

begin, end, rbegin, rend, clear, insert, size, swap


